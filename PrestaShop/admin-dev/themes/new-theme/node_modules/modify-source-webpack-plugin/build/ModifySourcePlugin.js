"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifySourcePlugin = void 0;
const path_1 = __importDefault(require("path"));
const webpack_1 = require("webpack");
const PLUGIN_NAME = 'ModifySourcePlugin';
class ModifySourcePlugin {
    constructor(options) {
        this.options = options;
    }
    apply(compiler) {
        const { rules, debug } = this.options;
        compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
            const modifiedModules = [];
            global.modifyFunctions = rules.map(rule => rule.modify);
            webpack_1.NormalModule.getCompilationHooks(compilation).beforeLoaders.tap(PLUGIN_NAME, (_, normalModule) => {
                const userRequest = normalModule.userRequest || '';
                const startIndex = userRequest.lastIndexOf('!') === -1
                    ? 0
                    : userRequest.lastIndexOf('!') + 1;
                const moduleRequest = userRequest
                    .substr(startIndex)
                    .replace(/\\/g, '/');
                if (modifiedModules.includes(moduleRequest)) {
                    return;
                }
                rules.forEach((options, ruleIndex) => {
                    const test = options.test;
                    const isMatched = (() => {
                        if (typeof test === 'function' && test(normalModule)) {
                            return true;
                        }
                        return test instanceof RegExp && test.test(moduleRequest);
                    })();
                    if (debug && isMatched) {
                        // eslint-disable-next-line no-console
                        console.log(`[ModifySourcePlugin][${ruleIndex}] File ${moduleRequest} is matched - add loader for this module.`);
                    }
                    if (isMatched) {
                        normalModule.loaders.push({
                            loader: require.resolve('./loader.js'),
                            options: {
                                filename: path_1.default.basename(moduleRequest),
                                ruleIndex
                            }
                        });
                        modifiedModules.push(moduleRequest);
                    }
                });
            });
        });
    }
}
exports.ModifySourcePlugin = ModifySourcePlugin;
//# sourceMappingURL=ModifySourcePlugin.js.map